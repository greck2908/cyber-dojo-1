
downloader currently returns a zip file of the *whole* kata with a git repo
per animal. This includes files such as the .class file in a Java kata.
It would be better to recreate the folder structure holding only
the visible files.

one of the issues with the download functionality is that I do
not delete the tar files after they've been downloaded. If the
creation of the tar file happened inside a container spun up just
do do the download then the tar file would be automatically deleted!

Also, if the storer migrates to a format where the individual visible
files are not stored (since the differ now does diffing) then I need
to make sure that a downloaded tgz file can be imported into the katas
data-container and it will be ok. A nice solution here might be that
the migrater (coupled to the storer) could recognize the old-style
format and migrate it to the new manifest only format - where individual
visible files are not stored, after all the visible files are held
inside the manifest per tag commit anyway!

What I need is a downloader which creates the tgz file of a cyberdojo
by accessing the manifest.N.json files and from those replaying the git commands.
I could mostly build that now, accessing the files from the manifest.json
file in each git tag. Then porting would be easy.

This will take time but the tgz file will often be a lot smaller.
Could I subsequently unzip such a tgz file into the katas folder?
I think so yes. The unzipped folders would contain .git dirs which
would indicate to the migrater that migration was required. In fact,
since the downloader saves a tgz holding gir repos its not so much
migration as conversion.

So
1a) new downloader service to create tgz of kata using visible-files from
    manifest.json files only. Has its own tests moved from web
1b) new runner service using one volume per id+animal
    it is passed filenames to delete, files (new/changed) to write into volume
    Has its own tests moved from storer.
2) storer can drop sandbox_save()
2) storer can drop X_path methods
2) storer can drop sandbox saves from kata_start_avatar()
2) storer can be new service with its own tests (moved from web tests)

3) manifest.json and increments.json files are still using git.
   FakeStorer can use RamDisk holding TAG/manifest.json and DummyGit
   FakeStorer delegates to Storer using method_missing
   but intercepts avatar_ran_tests() and tag_visible_files()
   FakeStorer can then be used in web tests.

3) new pruner service (would be simple) could delete sandbox folder from each
   avatar's dir leaving only manifest.json files (and increments.json) in the git tags.
   Of course that would still leave copies of sandbox in the git repo.
   Proper implementation would recreate a new avatar's dir off to the side
   with its own git repo and replay each manifest.json and increments.json file
   with their git tags. Then replace existing avatar dir with new pruned version.
   This would also be useful to round-trip saving a downloaded tgz file back into
   the katas dir.

